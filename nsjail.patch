diff --git a/Makefile b/Makefile
index 9494732..00751ed 100644
--- a/Makefile
+++ b/Makefile
@@ -28,15 +28,13 @@ COMMON_FLAGS += -O2 -c \
 	-D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 \
 	-fPIE \
 	-Wformat -Wformat-security -Wno-format-nonliteral \
-	-Wall -Wextra -Werror \
-	-Ikafel/include
+	-Wall -Wextra -Werror
 
-CXXFLAGS += $(USER_DEFINES) $(COMMON_FLAGS) $(shell pkg-config --cflags protobuf) \
+CXXFLAGS += $(USER_DEFINES) $(COMMON_FLAGS) $(shell pkg-config --cflags protobuf libseccomp) \
 	-std=c++11 -fno-exceptions -Wno-unused -Wno-unused-parameter
-LDFLAGS += -pie -Wl,-z,noexecstack -lpthread $(shell pkg-config --libs protobuf)
+LDFLAGS += -pie -Wl,-z,noexecstack -lpthread $(shell pkg-config --libs protobuf libseccomp)
 
 BIN = nsjail
-LIBS = kafel/libkafel.a
 SRCS_CXX = caps.cc cgroup.cc cgroup2.cc cmdline.cc config.cc contain.cc cpu.cc logs.cc mnt.cc net.cc nsjail.cc pid.cc sandbox.cc subproc.cc uts.cc user.cc util.cc
 SRCS_PROTO = config.proto
 SRCS_PB_CXX = $(SRCS_PROTO:.proto=.pb.cc)
@@ -56,9 +54,6 @@ endif
 
 .PHONY: all clean depend indent
 
-.cc.o: %.cc
-	$(CXX) $(CXXFLAGS) $< -o $@
-
 all: $(BIN)
 
 $(BIN): $(LIBS) $(OBJS)
@@ -69,16 +64,6 @@ ifneq ($(NL3_EXISTS), yes)
 endif
 	$(CXX) -o $(BIN) $(OBJS) $(LIBS) $(LDFLAGS)
 
-.PHONY: kafel_init
-kafel_init:
-ifeq ("$(wildcard kafel/Makefile)","")
-	git submodule update --init
-endif
-
-kafel/include/kafel.h: kafel_init
-kafel/libkafel.a: kafel_init
-	CFLAGS=-fPIE $(MAKE) -C kafel
-
 # Sequence of proto deps, which doesn't fit automatic make rules
 config.o: $(SRCS_PB_O) $(SRCS_PB_H)
 $(SRCS_PB_O): $(SRCS_PB_CXX) $(SRCS_PB_H)
@@ -88,13 +73,6 @@ $(SRCS_PB_CXX) $(SRCS_PB_H): $(SRCS_PROTO)
 .PHONY: clean
 clean:
 	$(RM) core Makefile.bak $(OBJS) $(SRCS_PB_CXX) $(SRCS_PB_H) $(BIN)
-ifneq ("$(wildcard kafel/Makefile)","")
-	$(MAKE) -C kafel clean
-endif
-
-.PHONY: depend
-depend: all
-	makedepend -Y -Ykafel/include -- -- $(SRCS_CXX) $(SRCS_PB_CXX)
 
 .PHONY: indent
 indent:
@@ -118,7 +96,7 @@ mnt.o: mnt.h nsjail.h logs.h macros.h subproc.h util.h
 net.o: net.h nsjail.h logs.h subproc.h
 nsjail.o: nsjail.h cmdline.h logs.h macros.h net.h sandbox.h subproc.h util.h
 pid.o: pid.h nsjail.h logs.h subproc.h
-sandbox.o: sandbox.h nsjail.h kafel/include/kafel.h logs.h util.h
+sandbox.o: sandbox.h nsjail.h logs.h util.h
 subproc.o: subproc.h nsjail.h cgroup.h cgroup2.h contain.h logs.h macros.h
 subproc.o: net.h sandbox.h user.h util.h
 uts.o: uts.h nsjail.h logs.h
diff --git a/cmdline.cc b/cmdline.cc
index d51a1ec..001cee2 100644
--- a/cmdline.cc
+++ b/cmdline.cc
@@ -138,8 +138,6 @@ struct custom_option custom_opts[] = {
     { { "disable_proc", no_argument, NULL, 0x0603 }, "Disable mounting procfs in the jail" },
     { { "proc_path", required_argument, NULL, 0x0605 }, "Path used to mount procfs (default: '/proc')" },
     { { "proc_rw", no_argument, NULL, 0x0606 }, "Is procfs mounted as R/W (default: R/O)" },
-    { { "seccomp_policy", required_argument, NULL, 'P' }, "Path to file containing seccomp-bpf policy (see kafel/)" },
-    { { "seccomp_string", required_argument, NULL, 0x0901 }, "String with kafel seccomp-bpf policy (see kafel/)" },
     { { "seccomp_log", no_argument, NULL, 0x0902 }, "Use SECCOMP_FILTER_FLAG_LOG. Log all actions except SECCOMP_RET_ALLOW). Supported since kernel version 4.14" },
     { { "nice_level", required_argument, NULL, 0x0903 }, "Set jailed process niceness (-20 is highest -priority, 19 is lowest). By default, set to 19" },
     { { "cgroup_mem_max", required_argument, NULL, 0x0801 }, "Maximum number of bytes to use in the group (default: '0' - disabled)" },
@@ -479,8 +477,6 @@ std::unique_ptr<nsjconf_t> parseArgs(int argc, char* argv[]) {
 	nsjconf->orig_uid = getuid();
 	nsjconf->orig_euid = geteuid();
 	nsjconf->num_cpus = sysconf(_SC_NPROCESSORS_ONLN);
-	nsjconf->seccomp_fprog.filter = NULL;
-	nsjconf->seccomp_fprog.len = 0;
 	nsjconf->seccomp_log = false;
 	nsjconf->nice_level = 19;
 
@@ -899,12 +895,6 @@ std::unique_ptr<nsjconf_t> parseArgs(int argc, char* argv[]) {
 		case 0x835:
 			nsjconf->use_cgroupv2 = true;
 			break;
-		case 'P':
-			nsjconf->kafel_file_path = optarg;
-			break;
-		case 0x901:
-			nsjconf->kafel_string = optarg;
-			break;
 		case 0x902:
 			nsjconf->seccomp_log = true;
 			break;
diff --git a/config.cc b/config.cc
index d42d9e1..303905d 100644
--- a/config.cc
+++ b/config.cc
@@ -240,13 +240,6 @@ static bool configParseInternal(nsjconf_t* nsjconf, const nsjail::NsJailConfig&
 		}
 	}
 
-	if (njc.has_seccomp_policy_file()) {
-		nsjconf->kafel_file_path = njc.seccomp_policy_file();
-	}
-	for (ssize_t i = 0; i < njc.seccomp_string().size(); i++) {
-		nsjconf->kafel_string += njc.seccomp_string(i);
-		nsjconf->kafel_string += '\n';
-	}
 	nsjconf->seccomp_log = njc.seccomp_log();
 	nsjconf->nice_level = njc.nice_level();
 
diff --git a/config.proto b/config.proto
index 49b0489..5a5bf7b 100644
--- a/config.proto
+++ b/config.proto
@@ -202,10 +202,6 @@ message NsJailConfig {
        for more */
     repeated MountPt mount = 63;
 
-    /* Kafel seccomp-bpf policy file or a string:
-       Homepage of the project: https://github.com/google/kafel */
-    optional string seccomp_policy_file = 64;
-    repeated string seccomp_string = 65;
     /* Setting it to true makes audit write seccomp logs to dmesg */
     optional bool seccomp_log = 66 [default = false];
 
diff --git a/nsjail.h b/nsjail.h
index 98c66c5..fa0060f 100644
--- a/nsjail.h
+++ b/nsjail.h
@@ -31,6 +31,7 @@
 #include <stdio.h>
 #include <time.h>
 #include <unistd.h>
+#include <seccomp.h>
 
 #include <map>
 #include <string>
@@ -160,9 +161,7 @@ struct nsjconf_t {
 	unsigned int cgroup_cpu_ms_per_sec;
 	std::string cgroupv2_mount;
 	bool use_cgroupv2;
-	std::string kafel_file_path;
-	std::string kafel_string;
-	struct sock_fprog seccomp_fprog;
+	scmp_filter_ctx seccomp_ctx;
 	bool seccomp_log;
 	int nice_level;
 	long num_cpus;
diff --git a/sandbox.cc b/sandbox.cc
index 1f1ac6c..d728d88 100644
--- a/sandbox.cc
+++ b/sandbox.cc
@@ -29,9 +29,7 @@
 #include <sys/syscall.h>
 #include <unistd.h>
 
-extern "C" {
-#include "kafel.h"
-}
+#include <seccomp.h>
 #include "logs.h"
 #include "util.h"
 
@@ -50,36 +48,8 @@ namespace sandbox {
 #endif /* SECCOMP_FILTER_FLAG_LOG */
 
 static bool prepareAndCommit(nsjconf_t* nsjconf) {
-	if (nsjconf->kafel_file_path.empty() && nsjconf->kafel_string.empty()) {
-		return true;
-	}
-
-	if (prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0)) {
-		PLOG_W("prctl(PR_SET_NO_NEW_PRIVS, 1) failed");
-		return false;
-	}
-	if (nsjconf->seccomp_log) {
-#ifndef __NR_seccomp
-		LOG_E(
-		    "The __NR_seccomp is not defined with this kernel's header files (kernel "
-		    "headers "
-		    "too old?)");
-		return false;
-#else
-		if (util::syscall(__NR_seccomp, (uintptr_t)SECCOMP_SET_MODE_FILTER,
-			(uintptr_t)(SECCOMP_FILTER_FLAG_TSYNC | SECCOMP_FILTER_FLAG_LOG),
-			(uintptr_t)&nsjconf->seccomp_fprog) == -1) {
-			PLOG_E(
-			    "seccomp(SECCOMP_SET_MODE_FILTER, SECCOMP_FILTER_FLAG_TSYNC | "
-			    "SECCOMP_FILTER_FLAG_LOG) failed");
-			return false;
-		}
-		return true;
-#endif /* __NR_seccomp */
-	}
-
-	if (prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &nsjconf->seccomp_fprog, 0UL, 0UL)) {
-		PLOG_W("prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER) failed");
+	if (seccomp_load(nsjconf->seccomp_ctx)) {
+		PLOG_E("seccomp_load() failed");
 		return false;
 	}
 	return true;
@@ -90,50 +60,35 @@ bool applyPolicy(nsjconf_t* nsjconf) {
 }
 
 bool preparePolicy(nsjconf_t* nsjconf) {
-	if (nsjconf->kafel_file_path.empty() && nsjconf->kafel_string.empty()) {
-		return true;
-	}
-	if (!nsjconf->kafel_file_path.empty() && !nsjconf->kafel_string.empty()) {
-		LOG_W(
-		    "You specified both kafel seccomp policy, and kafel seccomp file. Specify one "
-		    "only");
+	scmp_filter_ctx ctx = seccomp_init(SCMP_ACT_ALLOW);
+	if (seccomp_arch_add(ctx, SCMP_ARCH_X86)) {
+		PLOG_E("seccomp_arch_add(SCMP_ARCH_X86) failed");
 		return false;
 	}
 
-	kafel_ctxt_t ctxt = kafel_ctxt_create();
-
-	if (!nsjconf->kafel_file_path.empty()) {
-		FILE* f = fopen(nsjconf->kafel_file_path.c_str(), "r");
-		if (!f) {
-			PLOG_W("Couldn't open the kafel seccomp policy file '%s'",
-			    nsjconf->kafel_file_path.c_str());
-			kafel_ctxt_destroy(&ctxt);
+	for (int sys : {SCMP_SYS(mount), SCMP_SYS(sethostname), SCMP_SYS(umount), SCMP_SYS(pivot_root)}) {
+		if (seccomp_rule_add(ctx, SCMP_ACT_ERRNO(EPERM), sys, 0)) {
+			PLOG_E("seccomp_rule_add() failed");
 			return false;
 		}
-		LOG_D("Compiling seccomp policy from file: '%s'", nsjconf->kafel_file_path.c_str());
-		kafel_set_input_file(ctxt, f);
-	}
-	if (!nsjconf->kafel_string.empty()) {
-		LOG_D("Compiling seccomp policy from string: '%s'", nsjconf->kafel_string.c_str());
-		kafel_set_input_string(ctxt, nsjconf->kafel_string.c_str());
 	}
 
-	if (kafel_compile(ctxt, &nsjconf->seccomp_fprog) != 0) {
-		LOG_W("Could not compile policy: %s", kafel_error_msg(ctxt));
-		kafel_ctxt_destroy(&ctxt);
-		return false;
+	for (scmp_datum_t flag : {CLONE_NEWNS, CLONE_NEWCGROUP, CLONE_NEWUTS, CLONE_NEWIPC, CLONE_NEWUSER, CLONE_NEWPID, CLONE_NEWNET}) {
+		if (seccomp_rule_add(ctx, SCMP_ACT_ERRNO(EPERM), SCMP_SYS(clone), 1, SCMP_A0_64(SCMP_CMP_MASKED_EQ, flag, flag))) {
+			PLOG_E("seccomp_rule_add(clone) failed");
+			return false;
+		}
 	}
-	kafel_ctxt_destroy(&ctxt);
+
+	nsjconf->seccomp_ctx = ctx;
 	return true;
 }
 
 void closePolicy(nsjconf_t* nsjconf) {
-	if (!nsjconf->seccomp_fprog.filter) {
+	if (!nsjconf->seccomp_ctx) {
 		return;
 	}
-	free(nsjconf->seccomp_fprog.filter);
-	nsjconf->seccomp_fprog.filter = nullptr;
-	nsjconf->seccomp_fprog.len = 0;
+	seccomp_release(nsjconf->seccomp_ctx);
 }
 
 }  // namespace sandbox
